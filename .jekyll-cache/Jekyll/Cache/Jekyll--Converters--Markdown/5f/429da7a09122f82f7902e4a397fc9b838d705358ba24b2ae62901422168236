I"ﬁ<h1 id="innkapsling-og-validering---teorisp√∏rsm√•l">Innkapsling og validering - Teorisp√∏rsm√•l</h1>
<ol>
  <li>a) Hva er forskjellen p√•<strong>public</strong>, <strong>protected</strong> og <strong>private</strong>?
<span style="color:#980000;"><strong>public</strong></span><span style="color:#980000;"> brukes n√•r andre klasser skal kunne instansiere klassen direkte med </span><span style="color:#980000;">**new <klasse>(‚Ä¶)**&lt;/span&gt;<span style="color:#980000;">. </span><span style="color:#980000;">**protected**</span><span style="color:#980000;">-konstrukt√∏rer brukes for √• initialisere felt i en superklasse og kalles av subklassens konstrukt√∏r med </span><span style="color:#980000;">**super(‚Ä¶)**</span><span style="color:#980000;">. </span><span style="color:#980000;">**private**</span><span style="color:#980000;"> brukes p√• hjelpekonstrukt√∏rer internt i en klasse og kalles med </span><span style="color:#980000;">**this(‚Ä¶)**</span><span style="color:#980000;">.</span>
b) Hva b√∏r i utgangspunktet alle variablene dine v√¶re deklarert som? 
<span style="color:#980000;">Innkapsling handler om √•: 
1) hindre at en kan sette objekter til en ulovlig tilstand og 
2) skjule representasjonsdetaljer slik at en kan gj√∏re endringer uten at andre klasser ogs√• m√• endres. </span></klasse></span></li>
  <li>Hvilke to metoder er vanlig √• ha for variabler i Java? 
<span style="color:#980000;">Generelt er det en fordel √• redusere settet med metoder, siden det gir frihet til √• endre klasse siden. N√•r felt initaliseres i en konstrukt√∏r, s√• trengs som oftest ikke set-metoder. Her trenger en heller ikke get-metoder, siden metodene som stiller sp√∏rsm√•l og sjekker svar utgj√∏r et komplett API for klassen.</span></li>
</ol>
:ET